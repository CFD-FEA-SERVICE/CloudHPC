#!/bin/bash

###############################################################################
#
#   Script developped in 2020 by
#   CFD FEA SERVICE SRL - via Borgo Grande 19, 37044 Cologna Veneta VR
#
#   License: GPLv3
#
###############################################################################

#TODO default OpenFOAM CFD  -> sceglie la macchina e PRE
#TODO default Snappy   MESH -> sceglie la macchina e PRE

#OPTIONS and INSTRUCTIONS #####################################################
option=""
if [ ! $# -eq 0 ]
then
   option=$1
fi

#DOWNLOADING RECENT VERSION OF SCRIPT #########################################
if [ "$option" = "-update" ]
then
   #Updating to new version and installation
   echo "Checking for updates & installation ..."
   wget https://raw.githubusercontent.com/CFD-FEA-SERVICE/CloudHPC/master/exampleAPI/cloudHPCexec
   chmod ugo+x cloudHPCexec
   sudo rm /usr/local/bin/cloudHPCexec
   sudo mv cloudHPCexec /usr/local/bin

   #setting autocomplete
   sudo sh -c "echo '#/usr/bin/env bash'                                                         > /etc/bash_completion.d/cloudHPCexec"
   sudo sh -c "echo 'complete -W \"-apikey -help -mesh -update -download -batch\" cloudHPCexec' >> /etc/bash_completion.d/cloudHPCexec"

   echo "#####################################################################"
   echo "cloudHPCexec updated and installed successfully - Available for usage"
   echo "#####################################################################"

   exit
fi

#APIKEY RESET #################################################################
if [ "$option" = "-apikey" ]
then
   echo "APIKEY reset ..."
   rm -rf $HOME/.cfscloudhpc/apikey
fi

#HELP OPTIONS #################################################################
if [ "$option" = "-help" ]
then
   echo "List of options available:"
   echo "CLOUDHPC OPTIONS  ###################################################"
   echo "-download         Download results from STORAGE"
   echo "-mesh             Select mesh directory"
   echo "-batch            Insert command from batch without dialogs"
   echo "                       Expected 4+1 arguments: vCPU, RAM, SCRIPT and FOLDER + MESH [optional]"
   echo "                       Example: cloudHPCexec -batch 1 standard fds6.7.1 FOLDER-NAME [MESH-FOLDER-NAME]"
   echo ""
   echo "SCRIPT MANAGEMENT ###################################################"
   echo "-apikey           Reset your APIKEY"
   echo "-update           Update the software"
   echo "-help             Return this menu"
   exit
fi

#CHECKING EXTRA PACKAGES TO INSTALL############################################
#installation for Debian/Ubuntu
if [ $(command -v apt-get) ]
then
   if [ -z $(command -v dialog) ]
   then
      sudo apt-get install dialog
   fi
   if [ -z $(command -v jq) ]
   then
      sudo apt-get install jq
   fi
   if [ -z $(command -v pigz) ]
   then
      sudo apt-get install pigz
   fi
   if [ -z $(command -v curl) ]
   then
      sudo apt-get install curl
   fi

#installation for CENTOS
elif [ $(command -v yum) ]
then
   if [ -z $(command -v dialog) ]
   then
      sudo yum install dialog
   fi
   if [ -z $(command -v jq) ]
   then
      sudo yum install jq
   fi
   if [ -z $(command -v pigz) ]
   then
      sudo yum install pigz
   fi
   if [ -z $(command -v curl) ]
   then
      sudo yum install curl
   fi
fi

#GETTING/STORING APIKEY #######################################################
if [ -f $HOME/.cfscloudhpc/apikey ]
then
   apikey=$(head -n 1 $HOME/.cfscloudhpc/apikey)
else
   read -e -p "Insert APIKEY: " apikey
   mkdir $HOME/.cfscloudhpc
   echo "$apikey" > $HOME/.cfscloudhpc/apikey
fi

#DOWNLOAD RESULTS #############################################################
if [ "$option" = "-download" ]
then
   #PART 1 -> selection of folder to download TAR.GZ files from
   folder_storage_options=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                           -H "api-key: $apikey" \
  			   --header 'Accept: application/json' 2> log.tmp | python -m json.tool | jq .[].basename| tr -d \" )

   folder_storage_options=($(echo $folder_storage_options | tr " " "\n"))

   folder_options=()
   count=0

   for i in "${folder_storage_options[@]}"
   do :
   	count=$[count+1]
   	folder_options+=( ${count} $i )
   done

   folder_storage_number=$(dialog --clear --nocancel --menu "Pick the FOLDER" 13 60 19 "${folder_options[@]}" 2>&1 >/dev/tty)

   #PART 2  > selections of all files inside folder ending with "TAR.GZ"
   folder_id=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                                   -H "api-key: $apikey" \
				   --header 'Accept: application/json' 2> log.tmp | python -m json.tool | jq .[$(($folder_storage_number - 1))].id )

   file_ids=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/storage/$folder_id/list \
                                   -H "api-key: $apikey" \
				   --header 'Accept: application/json' 2> log.tmp | python -m json.tool | \
				    jq '.[] | .basename , .id' | grep 'tar.gz\|rmed' -A 1 | grep -v 'tar.gz' | grep -v 'rmed' | grep -v '\-\-' )

   file_ids=($(echo $file_ids | tr " " "\n"))

   #PART 3 > downloading selected files
   for file in "${file_ids[@]}"
   do : 
      url=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/storage/$file/download/url \
                   -H "api-key: $apikey" \
                   -H 'Content-Type: application/json' \
		   -H 'Accept: application/json'  2> log.tmp | python -m json.tool | jq .url | sed 's/"//g' )

      wget $url
   done

   rm log.tmp

   exit
fi

#EXECUTION AND API CALL #######################################################
FOLDER=$(basename $(pwd))

if [ "$option" = "-batch" ]
then
   cpu=$2
   ram=$3
   script=$4 
   folder_storage=$5

   if [ ! -z "$6" ]
   then
      mesh_storage=$6
      echo "Given mesh: $mesh_storage"
   fi

else

   # CPU selection
   cpu_options=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/cpu \
                 -H "api-key: $apikey" \
                --header 'Accept: application/json' 2> log.tmp | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   cpu_options=($(echo $cpu_options | tr " " "\n"))

   cpuoptions=()
   count=0

   for i in "${cpu_options[@]}"
   do :
   	count=$[count+1]
   	cpuoptions+=( ${count} $i )
   done

   cpu=$(dialog --clear --nocancel --menu "Pick the vCPU you need" 15 60 12 "${cpuoptions[@]}" 2>&1 >/dev/tty)
   cpu=${cpu_options[$(($cpu - 1))]}

   # RAM selection
   ram_options=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/ram \
               -H "api-key: $apikey" \
              --header 'Accept: application/json' 2> log.tmp | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   ram_options=($(echo $ram_options | tr " " "\n"))

   ramoptions=()
   count=0

   for i in "${ram_options[@]}"
   do :
	count=$[count+1]
   	ramoptions+=( ${count} $i )
   done

   ram=$(dialog --clear --nocancel --menu "Pick the RAM you need" 11 60 12 "${ramoptions[@]}" 2>&1 >/dev/tty)
   ram=${ram_options[$(($ram - 1))]}

   # Script selection
   script_options=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/scripts \
                            -H "api-key: $apikey" \
   		   --header 'Accept: application/json' 2> log.tmp | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   script_options=($(echo $script_options | tr " " "\n"))

   scriptoptions=()
   count=0
 
   for i in "${script_options[@]}"
   do :
 	count=$[count+1]
   	scriptoptions+=( ${count} $i )
   done

   script=$(dialog --clear --nocancel --menu "Pick the solver you use" 13 60 12 "${scriptoptions[@]}" 2>&1 >/dev/tty)
   script=${script_options[$(($script - 1))]}
 
   #FOLDER LIST EXTRACTION FROM CLOUD [MESH PART] ################################
   if [ "$option" = "-mesh" ]
   then
      folder_storage_options=$(curl -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                              -H "api-key: $apikey" \
     			   --header 'Accept: application/json' 2> log.tmp | python -m json.tool | jq .[].basename| tr -d \" )

      folder_storage_options=($(echo $folder_storage_options | tr " " "\n"))
  
      folder_options=()
      count=0

      for i in "${folder_storage_options[@]}"
      do :
   	count=$[count+1]
    	folder_options+=( ${count} $i )
      done

      mesh_storage=$(dialog --clear --nocancel --menu "Pick the MESH FOLDER" 13 60 19 "${folder_options[@]}" 2>&1 >/dev/tty)
      mesh_storage=${folder_storage_options[$(($mesh_storage - 1))]}
  
   else
      mesh_storage=""

   fi

   #SELECT CASE FOLDER ###########################################################
   clear

   read -e -p "Insert folder name [to use in cloud HPC]: " folder_storage

fi

#LOADING CURRENT FOLDER AS TAR FILE ###########################################
echo "Loading Current folder: $FOLDER / destination: $folder_storage"
tar -I pigz -cf $FOLDER.tar.gz * > log.tmp 2>&1

JSON_STRING=$( jq -n \
                  --arg dirname       "$folder_storage" \
                  --arg basename      "$FOLDER.tar.gz" \
                  --arg contentType   "application/octet-stream" \
                  '{data: {dirname: $dirname, basename: $basename, contentType: $contentType}}' )

UPLOAD_URL=$( curl -X POST \
  https://cloud.cfdfeaservice.it/api/v1/storage/upload/url \
  -H "api-key: $apikey" \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d "$JSON_STRING" | jq .url | tr -d \")

curl -X PUT \
  -H 'Content-Type: application/octet-stream' \
  -T $FOLDER.tar.gz $UPLOAD_URL

rm $FOLDER.tar.gz

#added sleep to avoid cache problems
sleep 15

#EXECUTE ANALYSIS #############################################################
echo "Executing $script on $cpu vCPU with $ram RAM"

JSON_STRING=$( jq -n \
                  --arg cpu    "$cpu" \
                  --arg ram    "$ram" \
                  --arg script "$script" \
                  --arg folder "$folder_storage" \
                  --arg nopre  "0" \
                  --arg mesh   "$mesh_storage" \
                  '{data: {cpu: $cpu, ram: $ram, folder: $folder, script: $script, nopre: $nopre, mesh: $mesh}}' )

curl -X POST \
  https://cloud.cfdfeaservice.it/api/v1/simulation \
  -H "api-key: $apikey" \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d "$JSON_STRING"

rm log.tmp

echo ""
