#!/bin/bash

###############################################################################
#
#   Script developped in 2020 by
#   CFD FEA SERVICE SRL - via Borgo Grande 19, 37044 Cologna Veneta VR
#
#   License: GPLv3
#
###############################################################################

#TODO default OpenFOAM CFD  -> sceglie la macchina e PRE
#TODO default Snappy   MESH -> sceglie la macchina e PRE

#OPTIONS and INSTRUCTIONS #####################################################
option=""
if [ ! $# -eq 0 ]
then
   option=$1
fi

#DOWNLOADING RECENT VERSION OF SCRIPT #########################################
if [ "$option" = "-update" ]
then
   #Updating to new version and installation
   echo "Checking for updates & installation ..."
   wget https://raw.githubusercontent.com/CFD-FEA-SERVICE/CloudHPC/master/exampleAPI/cloudHPCexec
   chmod ugo+x cloudHPCexec
   sudo rm /usr/local/bin/cloudHPCexec
   sudo mv cloudHPCexec /usr/local/bin

   #setting autocomplete
   sudo sh -c "echo '#/usr/bin/env bash'                                                               > /etc/bash_completion.d/cloudHPCexec"
   sudo sh -c "echo 'complete -W \"-apikey -help -mesh -update -download -batch -batchREG -delete -deleteSIM -ssh -vnc -scp -wait\" cloudHPCexec' >> /etc/bash_completion.d/cloudHPCexec"

   echo "#####################################################################"
   echo "cloudHPCexec updated and installed successfully - Available for usage"
   echo "#####################################################################"

   exit
fi

#APIKEY RESET #################################################################
if [ "$option" = "-apikey" ]
then
   echo "APIKEY reset ..."
   rm -rf $HOME/.cfscloudhpc/apikey

   option=$2
fi

#HELP OPTIONS #################################################################
if [ "$option" = "-help" ]
then
   echo "USE: cloudHPCexec [OPTION] [ARGUMENTS]"
   echo ""
   echo "cloudHPCexec: run analysis using the https://cloudhpc.cloud service directly from your terminal"
   echo "              for manual use just enter the folder you intend to run and type 'cloudHPCexec'   "
   echo "              follow then the instructions prompted to execute your simulation                 "
   echo ""
   echo "List of options available:"
   echo ""
   echo "CLOUDHPC ARGUMENTS #######################################################################################"
   echo "-mesh                 In prompt, show also mesh menu"
   echo "-download [path]      Download results from STORAGE"
   echo "                          path when specified download a specific file from the storage"
   echo "-batch                Insert command from batch without dialogs"
   echo "                          Expected 4+1 arguments: vCPU, RAM, SCRIPT and FOLDER + MESH [optional]"
   echo "                          Example: cloudHPCexec -batch 1 standard fds6.7.1 FOLDER-NAME [MESH-FOLDER-NAME]"
   echo "-batchREG             Like batch, but execute analysis on REG instances"
   echo "-wait ID              Wait for simulation ID to finish"
   echo "                          ID is returned when simulation is launched"
   echo "-soft [ID]            Soft STOP for simulation ID"
   echo "                          ID of the simulation to stop"
   echo "-hard [ID]            Hard STOP for simulation ID"
   echo "                          ID of the simulation to stop"
   echo "-ssh [ID]             SSH connection to running simulations"
   echo "                          ID when specified directly connects to given simulation ID"
   echo "-scp [ID]             Copy of the FOLDER via SCP connection"
   echo "                          ID when specified directly connects to given simulation ID"
   echo "-vnc [ID]             VNC connection to running simulations"
   echo "                          ID when specified directly connects to given simulation ID"
   echo "-delete [path]        Delete a file/folder from the storage"
   echo "                          Add path to delete specific file/folder"
   echo "-deleteSIM ID         Delete folders used by a specific simulation ID"
   echo ""
   echo "SCRIPT MANAGEMENT ########################################################################################"
   echo "-apikey           Reset your APIKEY"
   echo "-update           Update the software"
   echo "-help             Return this menu"
   exit
fi

#CHECKING EXTRA PACKAGES TO INSTALL############################################
#installation for Debian/Ubuntu
if [ $(command -v apt-get) ]
then
   if [ -z $(command -v dialog) ]
   then
      sudo apt-get -y install dialog
   fi
   if [ -z $(command -v jq) ]
   then
      sudo apt-get -y install jq
   fi
   if [ -z $(command -v pigz) ]
   then
      sudo apt-get -y install pigz
   fi
   if [ -z $(command -v curl) ]
   then
      sudo apt-get -y install curl
   fi

#installation for CENTOS
elif [ $(command -v yum) ]
then
   if [ -z $(command -v dialog) ]
   then
      sudo yum install dialog
   fi
   if [ -z $(command -v jq) ]
   then
      sudo yum install jq
   fi
   if [ -z $(command -v pigz) ]
   then
      sudo yum install pigz
   fi
   if [ -z $(command -v curl) ]
   then
      sudo yum install curl
   fi

fi

#GETTING/STORING APIKEY #######################################################
if [ -f $HOME/.cfscloudhpc/apikey ]
then
   apikey=$(head -n 1 $HOME/.cfscloudhpc/apikey)
else
   read -e -p "Insert APIKEY: " apikey
   mkdir -p $HOME/.cfscloudhpc
   echo "$apikey" > $HOME/.cfscloudhpc/apikey
fi

#DOWNLOAD RESULTS #############################################################
if [ "$option" = "-download" ]
then
   if [ $# -eq 1 ]
   then
      #PART 1 -> selection of folder to download TAR.GZ files from
      folder_storage_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                              -H "api-key: $apikey" \
     			   --header 'Accept: application/json' | python -m json.tool | jq .[].basename| tr -d \" )
   
      folder_storage_options=($(echo $folder_storage_options | tr " " "\n"))
   
      folder_options=()
      count=0
   
      for i in "${folder_storage_options[@]}"
      do :
      	count=$[count+1]
      	folder_options+=( ${count} $i )
      done
   
      folder_storage_number=$(dialog --clear --nocancel --menu "Pick the FOLDER" 13 60 19 "${folder_options[@]}" 2>&1 >/dev/tty)
   
      #PART 2  > selections of all files inside folder ending with "TAR.GZ"
      folder_id=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                                      -H "api-key: $apikey" \
   				   --header 'Accept: application/json' | python -m json.tool | jq .[$(($folder_storage_number - 1))].id )
   
      file_names=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/$folder_id/list \
                                      -H "api-key: $apikey" \
   				   --header 'Accept: application/json' | python -m json.tool | \
   				    jq '.[] | .path' | grep 'tar.gz\|rmed'  | sed 's/"//g' )
   
      file_names=($(echo $file_names | tr " " "\n"))
   
      #PART 3 > downloading selected files
      for file in "${file_names[@]}"
      do : 
         cloudHPCexec -download $file
      done
   
      exit

   #Download specific file given its path
   else
      filepath=$2

      echo "Downloading $filepath"

      JSON_STRING=$( jq -n --arg path   "$filepath" '{data: {path: $path}}' )

      file_id=$( curl -s -X POST https://cloud.cfdfeaservice.it/api/v1/storage/view -H "api-key: $apikey" -H 'Accept: application/json' -H  'Content-Type: application/json' -d "$JSON_STRING" | \
                 python -m json.tool | jq .id )

      while [ -z "$url" ]
      do
         url=$(curl -s -X GET "https://cloud.cfdfeaservice.it/api/v1/storage/$file_id/download/url" \
                      -H "api-key: $apikey" \
                      -H 'Content-Type: application/json' | python -m json.tool | jq -r .url )

         sleep 2
      done
  
      wget $url

      exit
   fi
fi

#DELETE FILE/FOLDER ###########################################################
if [ "$option" = "-delete" ]
then
   if [ $# -eq 1 ]
   then
      #PART 1 -> selection of folder to delete 
      folder_storage_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                              -H "api-key: $apikey" \
     			   --header 'Accept: application/json' | python -m json.tool | jq .[].basename| tr -d \" )
   
      folder_storage_options=($(echo $folder_storage_options | tr " " "\n"))
   
      folder_options=()
      count=0
   
      for i in "${folder_storage_options[@]}"
      do :
      	count=$[count+1]
      	folder_options+=( ${count} $i )
      done
   
      folder_storage_number=$(dialog --clear --nocancel --menu "Pick the FOLDER" 13 60 19 "${folder_options[@]}" 2>&1 >/dev/tty)
   
      folder_id=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                                      -H "api-key: $apikey" \
   				   --header 'Accept: application/json' | python -m json.tool | jq .[$(($folder_storage_number - 1))].id )

      echo "$folder_storage_number $folder_id"

      #TODO inserire DELETE BULK

      exit   

   #Download specific file given its path
   else
      folder_name=$2

      JSON_STRING=$( jq -n --arg path   "$folder_name" '{data: {path: $path}}' )

      folder_id=$( curl -s -X POST https://cloud.cfdfeaservice.it/api/v1/storage/view -H "api-key: $apikey" -H 'Accept: application/json' -H  'Content-Type: application/json' -d "$JSON_STRING" | \
                 python -m json.tool | jq .id )

      echo "$JSON_STRING $folder_id"

      #TODO inserire DELETE BULK

      exit
   fi
fi

#DELETE folder of a specific simulation #######################################
if [ "$option" = "-deleteSIM" ]
then
   if [ $# -eq 1 ]
   then
      echo "Insert the simulation ID used to retrieve the FOLDER name"
      exit
   fi

   simu_id=$2 

   echo "Delete: $simu_id"

   folder=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short/$simu_id -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -r .folder )

   cloudHPCexec -delete $folder

   exit
fi

#SOFT STOP of simulation ######################################################
if [ "$option" = "-soft" -o "$option" = "-hard" ]
then
   if [ $# -eq 1 ]
   then
      simulations=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -c '.[] | select( .status == 30 )' )

      echo "ID    | FOLDER"
      echo "================================="
      echo $simulations | jq -r '[ .id, .folder ] | @tsv'
      echo ""
      echo "Insert simulation ID to stop:"
      read -e simu_id
   else
      simu_id=$2 
   fi

   echo "Stopping: $simu_id"

   if [ "$option" = "-hard" ]
   then
      curl -s -X PUT https://cloud.cfdfeaservice.it/api/v1/simulation/$simu_id/stop -H "api-key: $apikey" -H 'Accept: application/json' -d '{ "data": { "signal": "SIGINT" } }'
   else
      curl -s -X PUT https://cloud.cfdfeaservice.it/api/v1/simulation/$simu_id/stop -H "api-key: $apikey" -H 'Accept: application/json' -d '{ "data": { "signal": "SIGTSTP" } }'
   fi

   exit
fi

#SSH connection to instances ##################################################
if [ "$option" = "-ssh" ]
then
   if [ $# -eq 1 ]
   then
      simulations=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -c '.[] | select( .status == 30 )' )

      echo "ID    | FOLDER"
      echo "================================="
      echo $simulations | jq -r '[ .id, .folder ] | @tsv'
      echo ""
      echo "Insert simulation ID to connect to:"
      read -e simu_id
   else
      simu_id=$2 
   fi

   echo "connecting to simulation: $simu_id"

   ip_address=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short/$simu_id -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -r .ip_address )

   #Removing IP_ADDRESS: it may be already present in previous connection
   ssh-keygen -f "$HOME/.ssh/known_hosts" -R $ip_address

   ssh -X -o "StrictHostKeyChecking no" cloudhpc@$ip_address

   exit
fi

#SCP copy files from instances ################################################
if [ "$option" = "-scp" ]
then
   if [ $# -eq 1 ]
   then
      simulations=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -c '.[] | select( .status == 30 )' )

      echo "ID    | FOLDER"
      echo "================================="
      echo $simulations | jq -r '[ .id, .folder ] | @tsv'
      echo ""
      echo "Insert simulation ID to download from:"
      read -e simu_id
   else
      simu_id=$2 
   fi

   echo "Downloading from: $simu_id"

   ip_address=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short/$simu_id -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -r .ip_address )
   folder=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short/$simu_id -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -r .folder )

   #Removing IP_ADDRESS: it may be already present in previous connection
   ssh-keygen -f "$HOME/.ssh/known_hosts" -R $ip_address

   scp -r -o "StrictHostKeyChecking no" cloudhpc@$ip_address:$folder .

   exit
fi

#VNC connection to instances ##################################################
if [ "$option" = "-vnc" ]
then
   if [ $# -eq 1 ]
   then
      simulations=$( curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/short -H "api-key: $apikey" -H 'Accept: application/json' | python -m json.tool | jq -c '.[] | select( .status == 30 )' )

      echo "ID    | FOLDER"
      echo "================================="
      echo $simulations | jq -r '[ .id, .folder ] | @tsv'
      echo ""
      echo "Insert simulation ID to connect to:"
      read -e simu_id
   else
      simu_id=$2 
   fi

   echo "connecting to simulation: $simu_id"

   sensible-browser https://cloud.cfdfeaservice.it/en/simulation/view/$simu_id &

   exit
fi

#WAIT for given simulation ID #################################################
if [ "$option" = "-wait" ]
then

   if [ ! -z "$2" ]
   then
      ID=$2
   else
      echo "Missing ID"
      exit
   fi

   while :
   do
      sleep 60

      status=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/$ID -H "api-key: $apikey" -H 'Accept: application/json' |  \
				    python -m json.tool | jq .status)

      if [ ! "$status" = "30" -a ! "$status" = "40" ]
      then
         echo "Status != 30 and != 40 detected for $ID"
         break
      fi
   done

   exit
fi

#EXECUTION AND API CALL #######################################################
FOLDER=$(basename $(pwd))

if [ "$option" = "-batch" -o "$option" = "-batchREG" ]
then
   cpu=$2
   ram=$3
   script=$4 
   folder_storage=$5

   if [ ! -z "$6" ]
   then
      mesh_storage=$6
      echo "Given mesh: $mesh_storage"
   fi

   regular=0

   if [ "$option" = "-batchREG" ]
   then
      regular=1
      echo "Running regular instance"
   fi
else

   # CPU selection
   cpu_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/cpu \
                 -H "api-key: $apikey" \
                --header 'Accept: application/json' | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   cpu_options=($(echo $cpu_options | tr " " "\n"))

   cpuoptions=()
   count=0

   for i in "${cpu_options[@]}"
   do :
   	count=$[count+1]
   	cpuoptions+=( ${count} $i )
   done

   cpu=$(dialog --clear --nocancel --menu "Pick the vCPU you need" 15 60 12 "${cpuoptions[@]}" 2>&1 >/dev/tty)
   cpu=${cpu_options[$(($cpu - 1))]}

   # RAM selection
   ram_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/ram \
               -H "api-key: $apikey" \
              --header 'Accept: application/json' | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   ram_options=($(echo $ram_options | tr " " "\n"))

   ramoptions=()
   count=0

   for i in "${ram_options[@]}"
   do :
	count=$[count+1]
   	ramoptions+=( ${count} $i )
   done

   ram=$(dialog --clear --nocancel --menu "Pick the RAM you need" 11 60 12 "${ramoptions[@]}" 2>&1 >/dev/tty)
   ram=${ram_options[$(($ram - 1))]}

   # Script selection
   script_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/simulation/scripts \
                            -H "api-key: $apikey" \
   		   --header 'Accept: application/json' | tr -d \" | sed 's/,/ /g' | sed 's/\[/ /g' | sed 's/\]/ /g' )

   script_options=($(echo $script_options | tr " " "\n"))

   scriptoptions=()
   count=0
 
   for i in "${script_options[@]}"
   do :
 	count=$[count+1]
   	scriptoptions+=( ${count} $i )
   done

   script=$(dialog --clear --nocancel --menu "Pick the solver you use" 13 60 12 "${scriptoptions[@]}" 2>&1 >/dev/tty)
   script=${script_options[$(($script - 1))]}
 
   #FOLDER LIST EXTRACTION FROM CLOUD [MESH PART] ################################
   if [ "$option" = "-mesh" ]
   then
      folder_storage_options=$(curl -s -X GET https://cloud.cfdfeaservice.it/api/v1/storage/0/list \
                              -H "api-key: $apikey" \
     			   --header 'Accept: application/json' | python -m json.tool | jq .[].basename| tr -d \" )

      folder_storage_options=($(echo $folder_storage_options | tr " " "\n"))
  
      folder_options=()
      count=0

      for i in "${folder_storage_options[@]}"
      do :
   	count=$[count+1]
    	folder_options+=( ${count} $i )
      done

      mesh_storage=$(dialog --clear --nocancel --menu "Pick the MESH FOLDER" 13 60 19 "${folder_options[@]}" 2>&1 >/dev/tty)
      mesh_storage=${folder_storage_options[$(($mesh_storage - 1))]}
  
   else
      mesh_storage=""

   fi

   #SELECT CASE FOLDER ###########################################################
   clear

   read -e -p "Insert folder name [to use in cloud HPC]: " folder_storage

fi

#LOADING CURRENT FOLDER AS TAR FILE ###########################################
echo "Loading Current folder: $FOLDER / destination: $folder_storage"
tar -I pigz -cf $FOLDER.tar.gz * > log.tmp 2>&1
rm log.tmp

JSON_STRING=$( jq -n \
                  --arg dirname       "$folder_storage" \
                  --arg basename      "$FOLDER.tar.gz" \
                  --arg contentType   "application/octet-stream" \
                  '{data: {dirname: $dirname, basename: $basename, contentType: $contentType}}' )

UPLOAD_URL=$( curl -s -X POST \
  https://cloud.cfdfeaservice.it/api/v1/storage/upload/url \
  -H "api-key: $apikey" \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d "$JSON_STRING" | jq .url | tr -d \")

curl -s -X PUT \
  -H 'Content-Type: application/octet-stream' \
  -T $FOLDER.tar.gz $UPLOAD_URL

rm $FOLDER.tar.gz

#EXECUTE ANALYSIS #############################################################
echo "Executing $script on $cpu vCPU with $ram RAM"

JSON_STRING=$( jq -n \
                  --arg cpu    "$cpu" \
                  --arg ram    "$ram" \
                  --arg script "$script" \
                  --arg folder "$folder_storage" \
                  --arg nopre  "$regular" \
                  --arg mesh   "$mesh_storage" \
                  '{data: {cpu: $cpu, ram: $ram, folder: $folder, script: $script, nopre: $nopre, mesh: $mesh}}' )

ID=$(curl -s -X POST \
  https://cloud.cfdfeaservice.it/api/v1/simulation \
  -H "api-key: $apikey" \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json' \
  -d "$JSON_STRING" )

echo "Simulation launched with ID = $ID"
