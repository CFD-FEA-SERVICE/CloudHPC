#!/bin/bash
shopt -s extglob

###############################################################################
#
#   Script developped in 2019 by
#   CFD FEA SERVICE SRL - via Borgo Grande 19, 37044 Cologna Veneta VR
#
#   License: GPLv3
#
###############################################################################

source /opt/FDS/FDS674/bin/FDS6VARS.sh

#Lasciamo lo stack unlimited
ulimit -s unlimited

#Rinominati i file FDS in fds
rename 's/\.FDS$/\.fds/' *.FDS

#Recuperiamo il nome del file FDS
var=($(ls *fds))
FDS_FILE=${var[0]}

echo "Running - $FDS_FILE"
echo "TIME string"

grep "T_END" "$FDS_FILE"

#Rimozione file .stop per evitare errore di avvio
rm *.stop

if grep "&MISC" "$FDS_FILE" | grep -q RESTART
then
   echo "** RESTART TRUE **"
else
   #Ripuliamo la directory da eventuali file precedenti
   rm -rf !(*.fds|*.FDS)
fi

#Se si mette il numero di cores come argomento usa quello, altrimenti prendi quelli richiesti dal file
if [ $# -eq 0 ]; then
   if grep -q MPI_PROCESS "$FDS_FILE"
   then
      #MPI cores richiesti dal file FDS
      nProc=$(($(sed 's/^.*MPI_PROCESS/MPI_PROCESS/' "$FDS_FILE" | grep MPI_PROCESS | cut -f1 -d"," | cut -f1 -d"/" | sed 's/ //g' | sed 's/MPI_PROCESS=//g' | tail -1) + 1))
      echo "Detected: $nProc MPI_PROCESS"

   else
      #Conteggio blocchi &MESH
      nProc=$( grep "&MESH" "$FDS_FILE" | wc -l )
      echo "Detected $nProc &MESH blocks"

   fi

   #MPI cores disponibili nel sistema per verifica che ve ne siano di disponibili
   nProc_loc="$(grep -c ^processor /proc/cpuinfo)"

   if [ $nProc_loc -lt $nProc ]
   then
      nProc=$nProc_loc
      echo "Reducing MPI because availability: $nProc"
   fi

else
   nProc=$1
fi

#Verifica della presenza di almeno una MESH nel file
if ! grep -q MESH "$FDS_FILE"
then
   echo "No &MESH on FDS file"
   exit
fi

#PREPARAZIONE FILE PER LO STOP
CHID=$(grep CHID *.fds | head -n 1 | sed 's/\TITLE.*//' | grep -o "'.*'" | sed "s/'//g")
echo "CHID = $CHID"
touch "$CHID.tostop"
grep "CHID" "$FDS_FILE"

#Calcolo THREADS (completamento tra i CORE richiesti e quelli disponibili)
OMP_NUM_THREADS="$(($(grep -c ^processor /proc/cpuinfo) / $nProc ))"

# THREADS sempre almeno 1
OMP_NUM_THREADS="$(($OMP_NUM_THREADS > 0 ? $OMP_NUM_THREADS : 1))"

echo "MPI cores: $nProc - MP threads: $OMP_NUM_THREADS"

#Esecuzione in backgroud dell'analisi e cattura del PID
mpiexec -np $nProc fds "$FDS_FILE" > "$CHID.log" 2>&1  &
process_id=$!

sleep 3
tail -f "$CHID.log" &
process_tail=$!

#Attesa del completamento del processo
sleep 1
wait $process_id
kill $process_tail
